{"ast":null,"code":"import{MAX_WORD_LENGTH}from'../../constants/settings';import{Cell}from'./Cell';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var CurrentRow=function CurrentRow(_ref){var guess=_ref.guess,className=_ref.className;var splitGuess=guess.split('');var emptyCells=Array.from(Array(MAX_WORD_LENGTH-splitGuess.length));var classes=\"flex justify-center mb-1 \".concat(className);return/*#__PURE__*/_jsxs(\"div\",{className:classes,children:[splitGuess.map(function(letter,i){return/*#__PURE__*/_jsx(Cell,{value:letter},i);}),emptyCells.map(function(_,i){return/*#__PURE__*/_jsx(Cell,{},i);})]});};","map":{"version":3,"sources":["/Users/hovanes.gasparian/Library/CloudStorage/OneDrive-Vizio/GitHub/barel/src/components/grid/CurrentRow.tsx"],"names":["MAX_WORD_LENGTH","Cell","CurrentRow","guess","className","splitGuess","split","emptyCells","Array","from","length","classes","map","letter","i","_"],"mappings":"AAAA,OAASA,eAAT,KAAgC,0BAAhC,CACA,OAASC,IAAT,KAAqB,QAArB,C,wFAOA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAAiC,IAA9BC,CAAAA,KAA8B,MAA9BA,KAA8B,CAAvBC,SAAuB,MAAvBA,SAAuB,CACzD,GAAMC,CAAAA,UAAU,CAAGF,KAAK,CAACG,KAAN,CAAY,EAAZ,CAAnB,CACA,GAAMC,CAAAA,UAAU,CAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACR,eAAe,CAAGK,UAAU,CAACK,MAA9B,CAAhB,CAAnB,CACA,GAAMC,CAAAA,OAAO,oCAA+BP,SAA/B,CAAb,CAEA,mBACE,aAAK,SAAS,CAAEO,OAAhB,WACGN,UAAU,CAACO,GAAX,CAAe,SAACC,MAAD,CAASC,CAAT,qBACd,KAAC,IAAD,EAAc,KAAK,CAAED,MAArB,EAAWC,CAAX,CADc,EAAf,CADH,CAIGP,UAAU,CAACK,GAAX,CAAe,SAACG,CAAD,CAAID,CAAJ,qBACd,KAAC,IAAD,IAAWA,CAAX,CADc,EAAf,CAJH,GADF,CAUD,CAfM","sourcesContent":["import { MAX_WORD_LENGTH } from '../../constants/settings'\nimport { Cell } from './Cell'\n\ntype Props = {\n  guess: string\n  className: string\n}\n\nexport const CurrentRow = ({ guess, className }: Props) => {\n  const splitGuess = guess.split('')\n  const emptyCells = Array.from(Array(MAX_WORD_LENGTH - splitGuess.length))\n  const classes = `flex justify-center mb-1 ${className}`\n\n  return (\n    <div className={classes}>\n      {splitGuess.map((letter, i) => (\n        <Cell key={i} value={letter} />\n      ))}\n      {emptyCells.map((_, i) => (\n        <Cell key={i} />\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}