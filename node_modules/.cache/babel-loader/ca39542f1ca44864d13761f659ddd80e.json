{"ast":null,"code":"var _jsxFileName = \"/Users/hovanes.gasparian/Library/CloudStorage/OneDrive-Vizio/GitHub/react-wordle/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { InformationCircleIcon, ChartBarIcon, CogIcon } from '@heroicons/react/outline';\nimport { useState, useEffect } from 'react';\nimport { Alert } from './components/alerts/Alert';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { StatsModal } from './components/modals/StatsModal';\nimport { SettingsModal } from './components/modals/SettingsModal';\nimport { GAME_TITLE, WIN_MESSAGES, GAME_COPIED_MESSAGE, NOT_ENOUGH_LETTERS_MESSAGE, WORD_NOT_FOUND_MESSAGE, CORRECT_WORD_MESSAGE } from './constants/strings';\nimport { MAX_WORD_LENGTH, MAX_CHALLENGES, ALERT_TIME_MS, REVEAL_TIME_MS, GAME_LOST_INFO_DELAY } from './constants/settings';\nimport { isWordInWordList, isWinningWord, solution, findFirstUnusedReveal } from './lib/words';\nimport { addStatsForCompletedGame, loadStats } from './lib/stats';\nimport { loadGameStateFromLocalStorage, saveGameStateToLocalStorage, setStoredIsHighContrastMode, getStoredIsHighContrastMode } from './lib/localStorage';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);\n  const [isHardModeAlertOpen, setIsHardModeAlertOpen] = useState(false);\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false);\n  const [currentRowClass, setCurrentRowClass] = useState('');\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('theme') ? localStorage.getItem('theme') === 'dark' : prefersDarkMode ? true : false);\n  const [isHighContrastMode, setIsHighContrastMode] = useState(getStoredIsHighContrastMode());\n  const [successAlert, setSuccessAlert] = useState('');\n  const [isRevealing, setIsRevealing] = useState(false);\n  const [guesses, setGuesses] = useState(() => {\n    const loaded = loadGameStateFromLocalStorage();\n\n    if ((loaded === null || loaded === void 0 ? void 0 : loaded.solution) !== solution) {\n      return [];\n    }\n\n    const gameWasWon = loaded.guesses.includes(solution);\n\n    if (gameWasWon) {\n      setIsGameWon(true);\n    }\n\n    if (loaded.guesses.length === MAX_CHALLENGES && !gameWasWon) {\n      setIsGameLost(true);\n    }\n\n    return loaded.guesses;\n  });\n  const [stats, setStats] = useState(() => loadStats());\n  const [isHardMode, setIsHardMode] = useState(localStorage.getItem('gameMode') ? localStorage.getItem('gameMode') === 'hard' : false);\n  const [isMissingPreviousLetters, setIsMissingPreviousLetters] = useState(false);\n  const [missingLetterMessage, setIsMissingLetterMessage] = useState('');\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast');\n    } else {\n      document.documentElement.classList.remove('high-contrast');\n    }\n  }, [isDarkMode, isHighContrastMode]);\n\n  const handleDarkMode = isDark => {\n    setIsDarkMode(isDark);\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  };\n\n  const handleHardMode = isHard => {\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard);\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal');\n    } else {\n      setIsHardModeAlertOpen(true);\n      return setTimeout(() => {\n        setIsHardModeAlertOpen(false);\n      }, ALERT_TIME_MS);\n    }\n  };\n\n  const handleHighContrastMode = isHighContrast => {\n    setIsHighContrastMode(isHighContrast);\n    setStoredIsHighContrastMode(isHighContrast);\n  };\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({\n      guesses,\n      solution\n    });\n  }, [guesses]);\n  useEffect(() => {\n    if (isGameWon) {\n      setTimeout(() => {\n        setSuccessAlert(WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]);\n        setTimeout(() => {\n          setSuccessAlert('');\n          setIsStatsModalOpen(true);\n        }, ALERT_TIME_MS);\n      }, REVEAL_TIME_MS * MAX_WORD_LENGTH);\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true);\n      }, GAME_LOST_INFO_DELAY);\n    }\n  }, [isGameWon, isGameLost]);\n\n  const onChar = value => {\n    if (currentGuess.length < MAX_WORD_LENGTH && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setCurrentGuess(`${currentGuess}${value}`);\n    }\n  };\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1));\n  };\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return;\n    }\n\n    if (!(currentGuess.length === MAX_WORD_LENGTH)) {\n      setIsNotEnoughLetters(true);\n      setCurrentRowClass('jiggle');\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false);\n        setCurrentRowClass('');\n      }, ALERT_TIME_MS);\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true);\n      setCurrentRowClass('jiggle');\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false);\n        setCurrentRowClass('');\n      }, ALERT_TIME_MS);\n    } // enforce hard mode - all guesses must contain all previously revealed letters\n\n\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses);\n\n      if (firstMissingReveal) {\n        setIsMissingLetterMessage(firstMissingReveal);\n        setIsMissingPreviousLetters(true);\n        setCurrentRowClass('jiggle');\n        return setTimeout(() => {\n          setIsMissingPreviousLetters(false);\n          setCurrentRowClass('');\n        }, ALERT_TIME_MS);\n      }\n    }\n\n    setIsRevealing(true); // turn this back off after all\n    // chars have been revealed\n\n    setTimeout(() => {\n      setIsRevealing(false);\n    }, REVEAL_TIME_MS * MAX_WORD_LENGTH);\n    const winningWord = isWinningWord(currentGuess);\n\n    if (currentGuess.length === MAX_WORD_LENGTH && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setGuesses([...guesses, currentGuess]);\n      setCurrentGuess('');\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length));\n        return setIsGameWon(true);\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n        setIsGameLost(true);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pt-2 pb-8 max-w-7xl mx-auto sm:px-6 lg:px-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex w-80 mx-auto items-center mb-8 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl ml-2.5 grow font-bold dark:text-white\",\n        children: GAME_TITLE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InformationCircleIcon, {\n        className: \"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\",\n        onClick: () => setIsInfoModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartBarIcon, {\n        className: \"h-6 w-6 mr-3 cursor-pointer dark:stroke-white\",\n        onClick: () => setIsStatsModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CogIcon, {\n        className: \"h-6 w-6 mr-3 cursor-pointer dark:stroke-white\",\n        onClick: () => setIsSettingsModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      guesses: guesses,\n      currentGuess: currentGuess,\n      isRevealing: isRevealing,\n      currentRowClassName: currentRowClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      onChar: onChar,\n      onDelete: onDelete,\n      onEnter: onEnter,\n      guesses: guesses,\n      isRevealing: isRevealing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n      isOpen: isInfoModalOpen,\n      handleClose: () => setIsInfoModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatsModal, {\n      isOpen: isStatsModalOpen,\n      handleClose: () => setIsStatsModalOpen(false),\n      guesses: guesses,\n      gameStats: stats,\n      isGameLost: isGameLost,\n      isGameWon: isGameWon,\n      handleShare: () => {\n        setSuccessAlert(GAME_COPIED_MESSAGE);\n        return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS);\n      },\n      isHardMode: isHardMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n      isOpen: isSettingsModalOpen,\n      handleClose: () => setIsSettingsModalOpen(false),\n      isHardMode: isHardMode,\n      handleHardMode: handleHardMode,\n      isDarkMode: isDarkMode,\n      handleDarkMode: handleDarkMode,\n      isHardModeErrorModalOpen: isHardModeAlertOpen,\n      isHighContrastMode: isHighContrastMode,\n      handleHighContrastMode: handleHighContrastMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: NOT_ENOUGH_LETTERS_MESSAGE,\n      isOpen: isNotEnoughLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: WORD_NOT_FOUND_MESSAGE,\n      isOpen: isWordNotFoundAlertOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: missingLetterMessage,\n      isOpen: isMissingPreviousLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: CORRECT_WORD_MESSAGE(solution),\n      isOpen: isGameLost && !isRevealing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: successAlert,\n      isOpen: successAlert !== '',\n      variant: \"success\",\n      topMost: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XeMldEQrHmy2YPB/5BcjbZcU1a8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hovanes.gasparian/Library/CloudStorage/OneDrive-Vizio/GitHub/react-wordle/src/App.tsx"],"names":["InformationCircleIcon","ChartBarIcon","CogIcon","useState","useEffect","Alert","Grid","Keyboard","InfoModal","StatsModal","SettingsModal","GAME_TITLE","WIN_MESSAGES","GAME_COPIED_MESSAGE","NOT_ENOUGH_LETTERS_MESSAGE","WORD_NOT_FOUND_MESSAGE","CORRECT_WORD_MESSAGE","MAX_WORD_LENGTH","MAX_CHALLENGES","ALERT_TIME_MS","REVEAL_TIME_MS","GAME_LOST_INFO_DELAY","isWordInWordList","isWinningWord","solution","findFirstUnusedReveal","addStatsForCompletedGame","loadStats","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","setStoredIsHighContrastMode","getStoredIsHighContrastMode","App","prefersDarkMode","window","matchMedia","matches","currentGuess","setCurrentGuess","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isNotEnoughLetters","setIsNotEnoughLetters","isStatsModalOpen","setIsStatsModalOpen","isSettingsModalOpen","setIsSettingsModalOpen","isHardModeAlertOpen","setIsHardModeAlertOpen","isWordNotFoundAlertOpen","setIsWordNotFoundAlertOpen","currentRowClass","setCurrentRowClass","isGameLost","setIsGameLost","isDarkMode","setIsDarkMode","localStorage","getItem","isHighContrastMode","setIsHighContrastMode","successAlert","setSuccessAlert","isRevealing","setIsRevealing","guesses","setGuesses","loaded","gameWasWon","includes","length","stats","setStats","isHardMode","setIsHardMode","isMissingPreviousLetters","setIsMissingPreviousLetters","missingLetterMessage","setIsMissingLetterMessage","document","documentElement","classList","add","remove","handleDarkMode","isDark","setItem","handleHardMode","isHard","setTimeout","handleHighContrastMode","isHighContrast","Math","floor","random","onChar","value","onDelete","slice","onEnter","firstMissingReveal","winningWord"],"mappings":"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","sourcesContent":["import {\n  InformationCircleIcon,\n  ChartBarIcon,\n  CogIcon,\n} from '@heroicons/react/outline'\nimport { useState, useEffect } from 'react'\nimport { Alert } from './components/alerts/Alert'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport { SettingsModal } from './components/modals/SettingsModal'\nimport {\n  GAME_TITLE,\n  WIN_MESSAGES,\n  GAME_COPIED_MESSAGE,\n  NOT_ENOUGH_LETTERS_MESSAGE,\n  WORD_NOT_FOUND_MESSAGE,\n  CORRECT_WORD_MESSAGE,\n} from './constants/strings'\nimport {\n  MAX_WORD_LENGTH,\n  MAX_CHALLENGES,\n  ALERT_TIME_MS,\n  REVEAL_TIME_MS,\n  GAME_LOST_INFO_DELAY,\n} from './constants/settings'\nimport {\n  isWordInWordList,\n  isWinningWord,\n  solution,\n  findFirstUnusedReveal,\n} from './lib/words'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport {\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n  setStoredIsHighContrastMode,\n  getStoredIsHighContrastMode,\n} from './lib/localStorage'\n\nimport './App.css'\n\nfunction App() {\n  const prefersDarkMode = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches\n\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false)\n  const [isHardModeAlertOpen, setIsHardModeAlertOpen] = useState(false)\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false)\n  const [currentRowClass, setCurrentRowClass] = useState('')\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(\n    localStorage.getItem('theme')\n      ? localStorage.getItem('theme') === 'dark'\n      : prefersDarkMode\n      ? true\n      : false\n  )\n  const [isHighContrastMode, setIsHighContrastMode] = useState(\n    getStoredIsHighContrastMode()\n  )\n  const [successAlert, setSuccessAlert] = useState('')\n  const [isRevealing, setIsRevealing] = useState(false)\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    const loaded = loadGameStateFromLocalStorage()\n    if (loaded?.solution !== solution) {\n      return []\n    }\n    const gameWasWon = loaded.guesses.includes(solution)\n    if (gameWasWon) {\n      setIsGameWon(true)\n    }\n    if (loaded.guesses.length === MAX_CHALLENGES && !gameWasWon) {\n      setIsGameLost(true)\n    }\n    return loaded.guesses\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n\n  const [isHardMode, setIsHardMode] = useState(\n    localStorage.getItem('gameMode')\n      ? localStorage.getItem('gameMode') === 'hard'\n      : false\n  )\n\n  const [isMissingPreviousLetters, setIsMissingPreviousLetters] =\n    useState(false)\n  const [missingLetterMessage, setIsMissingLetterMessage] = useState('')\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n\n    if (isHighContrastMode) {\n      document.documentElement.classList.add('high-contrast')\n    } else {\n      document.documentElement.classList.remove('high-contrast')\n    }\n  }, [isDarkMode, isHighContrastMode])\n\n  const handleDarkMode = (isDark: boolean) => {\n    setIsDarkMode(isDark)\n    localStorage.setItem('theme', isDark ? 'dark' : 'light')\n  }\n\n  const handleHardMode = (isHard: boolean) => {\n    if (guesses.length === 0 || localStorage.getItem('gameMode') === 'hard') {\n      setIsHardMode(isHard)\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal')\n    } else {\n      setIsHardModeAlertOpen(true)\n      return setTimeout(() => {\n        setIsHardModeAlertOpen(false)\n      }, ALERT_TIME_MS)\n    }\n  }\n\n  const handleHighContrastMode = (isHighContrast: boolean) => {\n    setIsHighContrastMode(isHighContrast)\n    setStoredIsHighContrastMode(isHighContrast)\n  }\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({ guesses, solution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      setTimeout(() => {\n        setSuccessAlert(\n          WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]\n        )\n\n        setTimeout(() => {\n          setSuccessAlert('')\n          setIsStatsModalOpen(true)\n        }, ALERT_TIME_MS)\n      }, REVEAL_TIME_MS * MAX_WORD_LENGTH)\n    }\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true)\n      }, GAME_LOST_INFO_DELAY)\n    }\n  }, [isGameWon, isGameLost])\n\n  const onChar = (value: string) => {\n    if (\n      currentGuess.length < MAX_WORD_LENGTH &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1))\n  }\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return\n    }\n    if (!(currentGuess.length === MAX_WORD_LENGTH)) {\n      setIsNotEnoughLetters(true)\n      setCurrentRowClass('jiggle')\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false)\n        setCurrentRowClass('')\n      }, ALERT_TIME_MS)\n    }\n\n    if (!isWordInWordList(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true)\n      setCurrentRowClass('jiggle')\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false)\n        setCurrentRowClass('')\n      }, ALERT_TIME_MS)\n    }\n\n    // enforce hard mode - all guesses must contain all previously revealed letters\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses)\n      if (firstMissingReveal) {\n        setIsMissingLetterMessage(firstMissingReveal)\n        setIsMissingPreviousLetters(true)\n        setCurrentRowClass('jiggle')\n        return setTimeout(() => {\n          setIsMissingPreviousLetters(false)\n          setCurrentRowClass('')\n        }, ALERT_TIME_MS)\n      }\n    }\n\n    setIsRevealing(true)\n    // turn this back off after all\n    // chars have been revealed\n    setTimeout(() => {\n      setIsRevealing(false)\n    }, REVEAL_TIME_MS * MAX_WORD_LENGTH)\n\n    const winningWord = isWinningWord(currentGuess)\n\n    if (\n      currentGuess.length === MAX_WORD_LENGTH &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setGuesses([...guesses, currentGuess])\n      setCurrentGuess('')\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length))\n        return setIsGameWon(true)\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        setIsGameLost(true)\n      }\n    }\n  }\n\n  return (\n    <div className=\"pt-2 pb-8 max-w-7xl mx-auto sm:px-6 lg:px-8\">\n      <div className=\"flex w-80 mx-auto items-center mb-8 mt-20\">\n        <h1 className=\"text-xl ml-2.5 grow font-bold dark:text-white\">\n          {GAME_TITLE}\n        </h1>\n        <InformationCircleIcon\n          className=\"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsInfoModalOpen(true)}\n        />\n        <ChartBarIcon\n          className=\"h-6 w-6 mr-3 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsStatsModalOpen(true)}\n        />\n        <CogIcon\n          className=\"h-6 w-6 mr-3 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsSettingsModalOpen(true)}\n        />\n      </div>\n      <Grid\n        guesses={guesses}\n        currentGuess={currentGuess}\n        isRevealing={isRevealing}\n        currentRowClassName={currentRowClass}\n      />\n      <Keyboard\n        onChar={onChar}\n        onDelete={onDelete}\n        onEnter={onEnter}\n        guesses={guesses}\n        isRevealing={isRevealing}\n      />\n      <InfoModal\n        isOpen={isInfoModalOpen}\n        handleClose={() => setIsInfoModalOpen(false)}\n      />\n      <StatsModal\n        isOpen={isStatsModalOpen}\n        handleClose={() => setIsStatsModalOpen(false)}\n        guesses={guesses}\n        gameStats={stats}\n        isGameLost={isGameLost}\n        isGameWon={isGameWon}\n        handleShare={() => {\n          setSuccessAlert(GAME_COPIED_MESSAGE)\n          return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS)\n        }}\n        isHardMode={isHardMode}\n      />\n      <SettingsModal\n        isOpen={isSettingsModalOpen}\n        handleClose={() => setIsSettingsModalOpen(false)}\n        isHardMode={isHardMode}\n        handleHardMode={handleHardMode}\n        isDarkMode={isDarkMode}\n        handleDarkMode={handleDarkMode}\n        isHardModeErrorModalOpen={isHardModeAlertOpen}\n        isHighContrastMode={isHighContrastMode}\n        handleHighContrastMode={handleHighContrastMode}\n      />\n\n      <Alert message={NOT_ENOUGH_LETTERS_MESSAGE} isOpen={isNotEnoughLetters} />\n      <Alert\n        message={WORD_NOT_FOUND_MESSAGE}\n        isOpen={isWordNotFoundAlertOpen}\n      />\n      <Alert message={missingLetterMessage} isOpen={isMissingPreviousLetters} />\n      <Alert\n        message={CORRECT_WORD_MESSAGE(solution)}\n        isOpen={isGameLost && !isRevealing}\n      />\n      <Alert\n        message={successAlert}\n        isOpen={successAlert !== ''}\n        variant=\"success\"\n        topMost={true}\n      />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}